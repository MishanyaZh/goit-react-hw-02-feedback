{"version":3,"sources":["Notification/Notification.module.css","App.module.css","FeedbackOptions/FeedbackOptions.styled.jsx","FeedbackOptions/FeedbackOptions.jsx","Notification/Notification.jsx","Statistics/Statistics.styled.jsx","Statistics/Statistics.jsx","Section/Section.jsx","Feedback/Feedback.styled.jsx","Feedback/Feedback.jsx","App.jsx","index.js","Section/Section.module.css"],"names":["module","exports","List","styled","ul","Button","button","FeedbackOptions","onLeaveFeedback","options","Object","keys","map","option","type","onClick","Notification","message","className","css","messageNotification","Container","div","props","eventType","Statistics","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","Section","title","children","section","titleSection","MainContainer","Feedback","state","leaveFeedback","setState","prevState","positiveFeedback","Math","round","this","Component","App","appContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,oBAAsB,4C,mBCAxCD,EAAOC,QAAU,CAAC,aAAe,4B,+JCEpBC,EAAOC,IAAOC,GAAV,sIAQJC,EAASF,IAAOG,OAAV,uX,OCQJC,I,IAAAA,EAhBf,YAAwD,IAA7BC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,QAC1C,OACE,8BACE,cAACP,EAAD,UACGQ,OAAOC,KAAKF,GAASG,KAAI,SAAAC,GAAM,OAC9B,6BACE,cAACR,EAAD,CAAQS,KAAK,SAASC,QAAS,kBAAMP,EAAgB,CAAEK,YAAvD,SACGA,KAFIA,W,iBCDJG,EAJM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mBAAGC,UAAWC,IAAIC,oBAAlB,SAAwCH,KCF7BI,EAAYlB,IAAOmB,IAAV,iKAIR,SAAAC,GAAK,OAAKA,EAAMC,WAAa,KAAO,UAAY,aAOjDtB,EAAOC,IAAOC,GAAV,gMCwBFqB,I,EAAAA,EAjCf,YAMI,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,mBACAC,EACC,EADDA,gCAEA,OAA8B,IAAvBD,EACL,eAACR,EAAD,CAAWG,UAAWM,EAAtB,UACE,eAAC,EAAD,WACE,6BACE,0CAAaJ,OAEf,6BACE,6CAAgBC,OAElB,6BACE,yCAAYC,UAIhB,eAAC,EAAD,WACE,6BACE,2CAAcC,OAEhB,qDAAwBC,EAAxB,aAIJ,cAAC,EAAD,CAAcb,QAAQ,uB,gBCvBXc,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKf,UAAWC,IAAIe,QAApB,UACE,mBAAGhB,UAAWC,IAAIgB,aAAlB,SAAiCH,IAChCC,MCJQG,EAAgBjC,IAAOmB,IAAV,qMCoDXe,E,4MA/CbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPW,cAAgB,YAAiB,IAAd1B,EAAa,EAAbA,OACjB,EAAK2B,UAAS,SAAAC,GAAS,sBAAQ5B,EAAS4B,EAAU5B,GAAU,O,EAG9DgB,mBAAqB,WAEnB,OADsB,EAAKS,MAAMV,IAAM,EAAKU,MAAMZ,KAAO,EAAKY,MAAMX,S,EAItEG,gCAAkC,WAChC,IAAMY,EAAmB,EAAKJ,MAAMZ,KAIpC,OAHwBiB,KAAKC,MAC1BF,EAAmB,EAAKb,qBAAwB,M,4CAKrD,WACE,OACE,eAACO,EAAD,WACE,cAAC,EAAD,CAASJ,MAAM,wBAAf,SACE,cAAC,EAAD,CACExB,gBAAiBqC,KAAKN,cACtB9B,QAASoC,KAAKP,UAIlB,cAAC,EAAD,CAASN,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMmB,KAAKP,MAAMZ,KACjBC,QAASkB,KAAKP,MAAMX,QACpBC,IAAKiB,KAAKP,MAAMV,IAChBC,mBAAoBgB,KAAKhB,qBACzBC,gCAAiCe,KAAKf,6C,GAxC3BgB,a,iBCMRC,MARf,WACE,OACE,qBAAK7B,UAAWC,IAAI6B,aAApB,SACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BrD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,iC","file":"static/js/main.a60c5dfb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageNotification\":\"Notification_messageNotification__31qFz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__uMoB-\"};","import styled from '@emotion/styled';\r\n\r\n\r\nexport const List = styled.ul`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    text-align: center;\r\n\r\n    list-style: none;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 70px;\r\n    height: 30px;\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    border-radius: 5px;\r\n    transition-duration: 0.2s;\r\n\r\n    &:hover {\r\n        transform: scale(1.1);\r\n    background: #aafcea;\r\n    color: #062afa;\r\n    box-shadow: 1px 1px 11px 1px #062afa;\r\n    transition-duration: 0.5s;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\nimport { List,Button} from './FeedbackOptions.styled';\n\nfunction FeedbackOptions({ onLeaveFeedback, options }) {\n  return (\n    <div>\n      <List>\n        {Object.keys(options).map(option => (\n          <li key={option}>\n            <Button type=\"button\" onClick={() => onLeaveFeedback({ option })}>\n              {option}\n            </Button>\n          </li>\n        ))}\n      </List>\n    </div>\n  );\n}\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n onLeaveFeedback: PropTypes.func.isRequired,\n  option:  PropTypes.PropTypes.arrayOf(\n    PropTypes.exact({\n      Good: PropTypes.string.isRequired,\n      Neutral: PropTypes.string.isRequired,\n      Bad: PropTypes.number.isRequired,\n    }),\n  ),\n};","import PropTypes from 'prop-types';\nimport css from './Notification.module.css';\n\nconst Notification = ({ message }) => (\n  <p className={css.messageNotification}>{message}</p>\n);\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\npadding-top:5px;\npadding-bottom: 5px;\nborder-radius:5px;\nbackground: ${props => (props.eventType >= '50' ? '#63f163' : '#fc7e68')};\n&:hover {\nbox-shadow: 1px 1px 11px 1px #062afa;\n}\n\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  transition-duration: 1s;\n  &:hover {\n    transform: scale(1.3);\n    transition: 1s;\n  }\n`;","import PropTypes from 'prop-types';\nimport Notification from '../Notification/Notification';\nimport { Container,List } from './Statistics.styled';\n\nfunction Statistics({\n  good,\n  neutral,\n  bad,\n  countTotalFeedback,\n  countPositiveFeedbackPercentage,\n}) {\n  return countTotalFeedback !== 0 ? (\n    <Container eventType={countPositiveFeedbackPercentage}>\n      <List>\n        <li>\n          <span>Good: {good}</span>\n        </li>\n        <li>\n          <span>Neutral: {neutral}</span>\n        </li>\n        <li>\n          <span>Bad: {bad}</span>\n        </li>\n      </List>\n\n      <List>\n        <li>\n          <span>Total: {countTotalFeedback}</span>\n        </li>\n        <li>Positive feedback: {countPositiveFeedbackPercentage}%</li>\n      </List>\n    </Container>\n  ) : (\n    <Notification message=\"No feedback given\" />\n  );\n}\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  countTotalFeedback: PropTypes.number.isRequired,\n  countPositiveFeedbackPercentage: PropTypes.number.isRequired,\n};","import PropTypes from 'prop-types';\nimport css from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={css.section}>\n    <p className={css.titleSection}>{title}</p>\n    {children}\n  </div>\n);\n\nexport default Section;\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n}\n","import styled from '@emotion/styled';\r\n\r\nexport const MainContainer = styled.div`\r\n  max-width: 300px;\r\n  padding: 20px;\r\n  background: rgb(224, 210, 210);\r\n  border: 1px solid crimson;\r\n  border-radius: 10px;\r\n  box-shadow: 1px 1px 11px 1px #062afa;\r\n`;","import { Component } from 'react';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions.jsx';\nimport Statistics from '../Statistics/Statistics.jsx';\nimport Section from '../Section/Section.jsx';\nimport { MainContainer } from './Feedback.styled.jsx';\n\nclass Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  leaveFeedback = ({ option }) => {\n    this.setState(prevState => ({ [option]: prevState[option] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const totalFeedback = this.state.bad + this.state.good + this.state.neutral;\n    return totalFeedback;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positiveFeedback = this.state.good;\n    const positivePercent = Math.round(\n      (positiveFeedback / this.countTotalFeedback()) * 100,\n    );\n    return positivePercent;\n  };\n\n  render() {\n    return (\n      <MainContainer>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            onLeaveFeedback={this.leaveFeedback}\n            options={this.state}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            countTotalFeedback={this.countTotalFeedback()}\n            countPositiveFeedbackPercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </MainContainer>\n    );\n  }\n}\n\nexport default Feedback;\n\n\n","import Feedback from './Feedback/Feedback';\n\nimport css from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={css.appContainer}>\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2ifGk\",\"titleSection\":\"Section_titleSection__2MBSD\"};"],"sourceRoot":""}